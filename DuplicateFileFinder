import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from duplicates import find_duplicates
import os
import platform
import subprocess

class DuplicateFileManager:
    def __init__(self, root):
        self.root = root
        self.root.title("Duplicate File Manager")
        self.root.geometry("1400x500")
        
        self.current_group_index = 0
        self.duplicate_groups = []
        
        # mainframe
        self.mainframe = ttk.Frame(root, padding="10 10 10 10")
        self.mainframe.grid(column=0, row=0, sticky=(tk.N, tk.W, tk.E, tk.S))
        root.columnconfigure(0, weight=1)
        root.rowconfigure(0, weight=1)
        
        # Grid weights for the mainframe
        self.mainframe.columnconfigure(1, weight=0)
        self.mainframe.columnconfigure(2, weight=1)
        self.mainframe.columnconfigure(3, weight=0)
        self.mainframe.rowconfigure(3, weight=1)
        
        # Folder selection
        ttk.Label(self.mainframe, text="Folder:").grid(column=1, row=1, sticky=tk.E)
        self.folder_entry = ttk.Entry(self.mainframe, width=50)
        self.folder_entry.grid(column=2, row=1, sticky=(tk.W, tk.E))
        
        self.browse_button = ttk.Button(self.mainframe, text="Browse", command=self.browse_folder)
        self.browse_button.grid(column=3, row=1, sticky=tk.W)
        
        # Find duplicates button
        self.find_button = ttk.Button(self.mainframe, text="Find Duplicates", command=self.find_duplicatescmd)
        self.find_button.grid(column=2, row=2, sticky=tk.W)
        
        # Duplicates display tble
        self.tree = ttk.Treeview(self.mainframe, columns=("file", "size", "modified"), selectmode="extended")
        self.tree.heading("#0", text="Keep")
        self.tree.heading("file", text="File Path")
        self.tree.heading("size", text="Size")
        self.tree.heading("modified", text="Modified")
        self.tree.column("#0", width=50, stretch=tk.NO)
        self.tree.column("file", width=900, stretch=tk.YES)
        self.tree.column("size", width=50, stretch=tk.NO)
        self.tree.column("modified", width=120, stretch=tk.NO)
        self.tree.grid(column=1, row=3, columnspan=3, sticky=(tk.N, tk.W, tk.E, tk.S), pady=5)
        
        # Buttons and File Double Click
        self.tree.bind('<Button-1>', self.on_tree_click)
        self.tree.bind('<Double-1>', self.on_file_double_click)
        
        # Dictionary to track which files are marked to keep
        self.keep_files = {}
        
        # Buttons to move around
        self.prev_button = ttk.Button(self.mainframe, text="Previous Group", command=self.prev_group)
        self.prev_button.grid(column=1, row=4, sticky=tk.W)
        
        self.next_button = ttk.Button(self.mainframe, text="Next Group", command=self.next_group)
        self.next_button.grid(column=2, row=4, sticky=tk.W)
        
        self.delete_button = ttk.Button(self.mainframe, text="Delete Selected", command=self.delete_files)
        self.delete_button.grid(column=3, row=4, sticky=tk.E)
        
        # Status bar
        # Displays "Found # duplicate groups"
        self.status_var = tk.StringVar() # StringVar to dynamically update status
        ttk.Label(self.mainframe, textvariable=self.status_var).grid(column=1, row=5, columnspan=3, sticky=tk.W)
        
        # Widget padding
        for child in self.mainframe.winfo_children(): 
            child.grid_configure(padx=5, pady=5)
        
        # Initialize state
        self.update_buttons_state()
    
    def browse_folder(self):
        folder = filedialog.askdirectory()
        if folder:
            self.folder_entry.delete(0, tk.END)
            self.folder_entry.insert(0, folder)
    
    def find_duplicatescmd(self):
        folder = self.folder_entry.get()
        if not folder:
            messagebox.showerror("Error", "Please select a folder first")
            return
    
        try:
            self.duplicate_groups = find_duplicates(folder)
            # Only include groups with more than one file
            self.duplicate_groups = [files for files in self.duplicate_groups.values() if len(files) > 1]
            self.current_group_index = 0
            self.display_current_group()
            self.update_buttons_state()
            self.update_status(f"Found {len(self.duplicate_groups)} duplicate groups")
        except Exception as e:
            messagebox.showerror("Error", f"An error occurred: {str(e)}")
            self.duplicate_groups = []
            
    def on_file_double_click(self, event):
        item = self.tree.identify("item", event.x, event.y)
        column = self.tree.identify("column", event.x, event.y)
        
        if column == "#1":  
            file_path = self.tree.item(item, "values")[0]
            self.reveal_file_in_explorer(file_path)
    
    def reveal_file_in_explorer(self, file_path):
        if platform.system() == "Windows":
            subprocess.Popen(f'explorer /select,"{os.path.normpath(file_path)}"')
        elif platform.system() == "Darwin":
            subprocess.Popen(["open", "-R", file_path])
        else:
            subprocess.Popen(["xdg-open", os.path.dirname(file_path)])
            
    def prev_group(self):
        if self.current_group_index > 0:
            self.current_group_index -= 1
            self.display_current_group()
            self.update_buttons_state()
    
    def next_group(self):
        if self.current_group_index < len(self.duplicate_groups) - 1:
            self.current_group_index += 1
            self.display_current_group()
            self.update_buttons_state()
    
    def on_tree_click(self, event):
        """Handle clicks on the Keep checkbox column"""
        region = self.tree.identify("region", event.x, event.y)
        if region == "tree":
            item = self.tree.identify("item", event.x, event.y)
            column = self.tree.identify("column", event.x, event.y)
            
            if column == "#0":
                current_text = self.tree.item(item, "text")
                if current_text == "✓":
                    self.tree.item(item, text="")
                    self.keep_files[item] = False
                else:
                    self.tree.item(item, text="✓")
                    self.keep_files[item] = True

    def display_current_group(self):
        """Display the current group of duplicates with all files initially marked to keep"""
        self.tree.delete(*self.tree.get_children())
        self.keep_files = {}  
        
        if not self.duplicate_groups or self.current_group_index >= len(self.duplicate_groups):
            return
        
        for file_path in self.duplicate_groups[self.current_group_index]:
            file_size = os.path.getsize(file_path)
            modified = os.path.getmtime(file_path)
            item = self.tree.insert("", "end", text="✓", values=(file_path, file_size, modified))
            self.keep_files[item] = True  # Default to all files to be kept!

    def delete_files(self):
        """Delete all files not marked to keep in the current group"""
        if not self.duplicate_groups or self.current_group_index >= len(self.duplicate_groups):
            messagebox.showwarning("Warning", "No duplicate group selected")
            return
        
        # Get all items in the current group
        items = self.tree.get_children()
        files_to_delete = []
        
        for item in items:
            if not self.keep_files.get(item, False):  # If not marked to keep, delete file
                file_path = self.tree.item(item, "values")[0]
                files_to_delete.append(file_path)
        
        if not files_to_delete:
            messagebox.showwarning("Warning", "No files selected for deletion")
            return
        
        try:
            number_delete_files = len(files_to_delete)
            
            if number_delete_files == 1:
                confirm = messagebox.askyesno(
                "Confirm Deletion",
                f"Are you sure you want to delete {number_delete_files} file? They are going to be lost forever!"
                )
            else: 
                confirm = messagebox.askyesno(
                "Confirm Deletion",
                f"Are you sure you want to delete {number_delete_files} files? They are going to be lost forever!"
                )
            
            if confirm:
                for file_path in files_to_delete:
                    os.remove(file_path)
                messagebox.showinfo("Success", f"Deleted {number_delete_files} files")
                self.find_duplicatescmd()  # Refreshes the list
                
        except Exception as e:
            messagebox.showerror("Error", f"Failed to delete files: {str(e)}")
    
    def update_buttons_state(self):
        self.prev_button["state"] = "normal" if self.current_group_index > 0 else "disabled"
        self.next_button["state"] = "normal" if self.current_group_index < len(self.duplicate_groups) - 1 else "disabled"
        self.delete_button["state"] = "normal" if self.duplicate_groups else "disabled"
    
    def update_status(self, message):
        self.status_var.set(message)

root = tk.Tk()
app = DuplicateFileManager(root)
root.mainloop()
